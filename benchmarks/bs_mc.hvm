{
  "labels": {
    "__end__": "156"
  },
  "code": [
    { "op": "Frame", "name": "__init__", "args": "()" },
    { "op": "Jump", "pc": "99" },
    { "op": "Frame", "name": "binary_search_rec", "args": "(arr, val, l, r)" },
    { "op": "DelVar", "value": "result" },
    { "op": "LoadVar", "value": "l" },
    { "op": "LoadVar", "value": "r" },
    { "op": "Nary", "arity": 2, "value": "+" },
    { "op": "Push", "value": { "type": "int", "value": "2" } },
    { "op": "Nary", "arity": 2, "value": "/" },
    { "op": "StoreVar", "value": "m" },
    { "op": "LoadVar", "value": "arr" },
    { "op": "LoadVar", "value": "m" },
    { "op": "Apply" },
    { "op": "LoadVar", "value": "val" },
    { "op": "Nary", "arity": 2, "value": "==" },
    { "op": "JumpCond", "pc": "24", "cond": { "type": "bool", "value": "False" } },
    { "op": "DelVar", "value": "val" },
    { "op": "DelVar", "value": "l" },
    { "op": "DelVar", "value": "arr" },
    { "op": "DelVar", "value": "r" },
    { "op": "LoadVar", "value": "m" },
    { "op": "DelVar", "value": "m" },
    { "op": "StoreVar", "value": "result" },
    { "op": "Jump", "pc": "75" },
    { "op": "LoadVar", "value": "val" },
    { "op": "LoadVar", "value": "arr" },
    { "op": "LoadVar", "value": "m" },
    { "op": "Apply" },
    { "op": "Nary", "arity": 2, "value": "<" },
    { "op": "JumpCond", "pc": "52", "cond": { "type": "bool", "value": "False" } },
    { "op": "DelVar", "value": "r" },
    { "op": "Push", "value": { "type": "pc", "value": "2" } },
    { "op": "Push", "value": { "type": "dict", "value": [] } },
    { "op": "Push", "value": { "type": "int", "value": "0" } },
    { "op": "LoadVar", "value": "arr" },
    { "op": "DelVar", "value": "arr" },
    { "op": "Nary", "arity": 3, "value": "DictAdd" },
    { "op": "Push", "value": { "type": "int", "value": "1" } },
    { "op": "LoadVar", "value": "val" },
    { "op": "DelVar", "value": "val" },
    { "op": "Nary", "arity": 3, "value": "DictAdd" },
    { "op": "Push", "value": { "type": "int", "value": "2" } },
    { "op": "LoadVar", "value": "l" },
    { "op": "DelVar", "value": "l" },
    { "op": "Nary", "arity": 3, "value": "DictAdd" },
    { "op": "Push", "value": { "type": "int", "value": "3" } },
    { "op": "LoadVar", "value": "m" },
    { "op": "DelVar", "value": "m" },
    { "op": "Nary", "arity": 3, "value": "DictAdd" },
    { "op": "Apply" },
    { "op": "StoreVar", "value": "result" },
    { "op": "Jump", "pc": "75" },
    { "op": "DelVar", "value": "l" },
    { "op": "Push", "value": { "type": "pc", "value": "2" } },
    { "op": "Push", "value": { "type": "dict", "value": [] } },
    { "op": "Push", "value": { "type": "int", "value": "0" } },
    { "op": "LoadVar", "value": "arr" },
    { "op": "DelVar", "value": "arr" },
    { "op": "Nary", "arity": 3, "value": "DictAdd" },
    { "op": "Push", "value": { "type": "int", "value": "1" } },
    { "op": "LoadVar", "value": "val" },
    { "op": "DelVar", "value": "val" },
    { "op": "Nary", "arity": 3, "value": "DictAdd" },
    { "op": "Push", "value": { "type": "int", "value": "2" } },
    { "op": "LoadVar", "value": "m" },
    { "op": "DelVar", "value": "m" },
    { "op": "Push", "value": { "type": "int", "value": "1" } },
    { "op": "Nary", "arity": 2, "value": "+" },
    { "op": "Nary", "arity": 3, "value": "DictAdd" },
    { "op": "Push", "value": { "type": "int", "value": "3" } },
    { "op": "LoadVar", "value": "r" },
    { "op": "DelVar", "value": "r" },
    { "op": "Nary", "arity": 3, "value": "DictAdd" },
    { "op": "Apply" },
    { "op": "StoreVar", "value": "result" },
    { "op": "Return" },
    { "op": "Jump", "pc": "99" },
    { "op": "Frame", "name": "binary_search", "args": "(arr, val)" },
    { "op": "DelVar", "value": "result" },
    { "op": "Push", "value": { "type": "pc", "value": "2" } },
    { "op": "Push", "value": { "type": "dict", "value": [] } },
    { "op": "Push", "value": { "type": "int", "value": "0" } },
    { "op": "LoadVar", "value": "arr" },
    { "op": "Nary", "arity": 3, "value": "DictAdd" },
    { "op": "Push", "value": { "type": "int", "value": "1" } },
    { "op": "LoadVar", "value": "val" },
    { "op": "DelVar", "value": "val" },
    { "op": "Nary", "arity": 3, "value": "DictAdd" },
    { "op": "Push", "value": { "type": "int", "value": "2" } },
    { "op": "Push", "value": { "type": "int", "value": "0" } },
    { "op": "Nary", "arity": 3, "value": "DictAdd" },
    { "op": "Push", "value": { "type": "int", "value": "3" } },
    { "op": "LoadVar", "value": "arr" },
    { "op": "DelVar", "value": "arr" },
    { "op": "Nary", "arity": 1, "value": "len" },
    { "op": "Nary", "arity": 3, "value": "DictAdd" },
    { "op": "Apply" },
    { "op": "StoreVar", "value": "result" },
    { "op": "Return" },
    { "op": "Push", "value": { "type": "int", "value": "0" } },
    { "op": "StoreVar", "value": "$n80" },
    { "op": "Push", "value": { "type": "dict", "value": [] } },
    { "op": "Push", "value": { "type": "set", "value": [{ "type": "int", "value": "0" }, { "type": "int", "value": "1" }, { "type": "int", "value": "2" }, { "type": "int", "value": "3" }, { "type": "int", "value": "4" }, { "type": "int", "value": "5" }, { "type": "int", "value": "6" }, { "type": "int", "value": "7" }, { "type": "int", "value": "8" }, { "type": "int", "value": "9" }] } },
    { "op": "StoreVar", "value": "$s83" },
    { "op": "LoadVar", "value": "$s83" },
    { "op": "Nary", "arity": 1, "value": "IsEmpty" },
    { "op": "JumpCond", "pc": "114", "cond": { "type": "bool", "value": "True" } },
    { "op": "Cut", "set": "$s83", "value": "i" },
    { "op": "LoadVar", "value": "$n80" },
    { "op": "LoadVar", "value": "i" },
    { "op": "DelVar", "value": "i" },
    { "op": "Nary", "arity": 3, "value": "DictAdd" },
    { "op": "IncVar", "value": "$n80" },
    { "op": "Jump", "pc": "104" },
    { "op": "DelVar", "value": "$n80" },
    { "op": "DelVar", "value": "$s83" },
    { "op": "Store", "value": [{ "type": "atom", "value": "arr" }] },
    { "op": "Push", "value": { "type": "set", "value": [{ "type": "int", "value": "0" }, { "type": "int", "value": "1" }, { "type": "int", "value": "2" }, { "type": "int", "value": "3" }, { "type": "int", "value": "4" }, { "type": "int", "value": "5" }, { "type": "int", "value": "6" }, { "type": "int", "value": "7" }, { "type": "int", "value": "8" }, { "type": "int", "value": "9" }] } },
    { "op": "Store", "value": [{ "type": "atom", "value": "values" }] },
    { "op": "Load", "value": [{ "type": "atom", "value": "values" }] },
    { "op": "Nary", "arity": 1, "value": "len" },
    { "op": "Push", "value": { "type": "int", "value": "0" } },
    { "op": "Nary", "arity": 2, "value": "!=" },
    { "op": "JumpCond", "pc": "154", "cond": { "type": "bool", "value": "False" } },
    { "op": "Load", "value": [{ "type": "atom", "value": "values" }] },
    { "op": "Choose" },
    { "op": "StoreVar", "value": "x" },
    { "op": "Load", "value": [{ "type": "atom", "value": "values" }] },
    { "op": "Push", "value": { "type": "set", "value": [] } },
    { "op": "LoadVar", "value": "x" },
    { "op": "Nary", "arity": 2, "value": "SetAdd" },
    { "op": "Nary", "arity": 2, "value": "-" },
    { "op": "Store", "value": [{ "type": "atom", "value": "values" }] },
    { "op": "Push", "value": { "type": "pc", "value": "77" } },
    { "op": "Push", "value": { "type": "dict", "value": [] } },
    { "op": "Push", "value": { "type": "int", "value": "0" } },
    { "op": "Load", "value": [{ "type": "atom", "value": "arr" }] },
    { "op": "Nary", "arity": 3, "value": "DictAdd" },
    { "op": "Push", "value": { "type": "int", "value": "1" } },
    { "op": "LoadVar", "value": "x" },
    { "op": "Nary", "arity": 3, "value": "DictAdd" },
    { "op": "Apply" },
    { "op": "StoreVar", "value": "i" },
    { "op": "ReadonlyInc" },
    { "op": "AtomicInc", "lazy": "True" },
    { "op": "LoadVar", "value": "i" },
    { "op": "DelVar", "value": "i" },
    { "op": "LoadVar", "value": "x" },
    { "op": "DelVar", "value": "x" },
    { "op": "Nary", "arity": 2, "value": "==" },
    { "op": "Assert" },
    { "op": "AtomicDec" },
    { "op": "ReadonlyDec" },
    { "op": "Jump", "pc": "119" },
    { "op": "Return" },
    { "op": "DelVar", "value": "result" }
  ],
  "pretty": [
    ["Frame __init__ ()","start of method __init__"],
    ["Jump 99","set program counter to 99"],
    ["Frame binary_search_rec (arr, val, l, r)","start of method binary_search_rec"],
    ["DelVar result","delete method variable result"],
    ["LoadVar l","push the value of l"],
    ["LoadVar r","push the value of r"],
    ["2-ary +","pop 2 values and push the result of applying +"],
    ["Push 2","push constant 2"],
    ["2-ary /","pop 2 values and push the result of applying /"],
    ["StoreVar m","pop a value and store in m"],
    ["LoadVar arr","push the value of arr"],
    ["LoadVar m","push the value of m"],
    ["Apply","pop a pc or dictionary f and an index i and push f(i)"],
    ["LoadVar val","push the value of val"],
    ["2-ary ==","pop 2 values and push the result of applying =="],
    ["JumpCond False 24","pop a value and jump to 24 if the value is False"],
    ["DelVar val","delete method variable val"],
    ["DelVar l","delete method variable l"],
    ["DelVar arr","delete method variable arr"],
    ["DelVar r","delete method variable r"],
    ["LoadVar m","push the value of m"],
    ["DelVar m","delete method variable m"],
    ["StoreVar result","pop a value and store in result"],
    ["Jump 75","set program counter to 75"],
    ["LoadVar val","push the value of val"],
    ["LoadVar arr","push the value of arr"],
    ["LoadVar m","push the value of m"],
    ["Apply","pop a pc or dictionary f and an index i and push f(i)"],
    ["2-ary <","pop 2 values and push the result of applying <"],
    ["JumpCond False 52","pop a value and jump to 52 if the value is False"],
    ["DelVar r","delete method variable r"],
    ["Push PC(2)","push constant PC(2)"],
    ["Push ()","push constant ()"],
    ["Push 0","push constant 0"],
    ["LoadVar arr","push the value of arr"],
    ["DelVar arr","delete method variable arr"],
    ["3-ary DictAdd","pop 3 values and push the result of applying DictAdd"],
    ["Push 1","push constant 1"],
    ["LoadVar val","push the value of val"],
    ["DelVar val","delete method variable val"],
    ["3-ary DictAdd","pop 3 values and push the result of applying DictAdd"],
    ["Push 2","push constant 2"],
    ["LoadVar l","push the value of l"],
    ["DelVar l","delete method variable l"],
    ["3-ary DictAdd","pop 3 values and push the result of applying DictAdd"],
    ["Push 3","push constant 3"],
    ["LoadVar m","push the value of m"],
    ["DelVar m","delete method variable m"],
    ["3-ary DictAdd","pop 3 values and push the result of applying DictAdd"],
    ["Apply","pop a pc or dictionary f and an index i and push f(i)"],
    ["StoreVar result","pop a value and store in result"],
    ["Jump 75","set program counter to 75"],
    ["DelVar l","delete method variable l"],
    ["Push PC(2)","push constant PC(2)"],
    ["Push ()","push constant ()"],
    ["Push 0","push constant 0"],
    ["LoadVar arr","push the value of arr"],
    ["DelVar arr","delete method variable arr"],
    ["3-ary DictAdd","pop 3 values and push the result of applying DictAdd"],
    ["Push 1","push constant 1"],
    ["LoadVar val","push the value of val"],
    ["DelVar val","delete method variable val"],
    ["3-ary DictAdd","pop 3 values and push the result of applying DictAdd"],
    ["Push 2","push constant 2"],
    ["LoadVar m","push the value of m"],
    ["DelVar m","delete method variable m"],
    ["Push 1","push constant 1"],
    ["2-ary +","pop 2 values and push the result of applying +"],
    ["3-ary DictAdd","pop 3 values and push the result of applying DictAdd"],
    ["Push 3","push constant 3"],
    ["LoadVar r","push the value of r"],
    ["DelVar r","delete method variable r"],
    ["3-ary DictAdd","pop 3 values and push the result of applying DictAdd"],
    ["Apply","pop a pc or dictionary f and an index i and push f(i)"],
    ["StoreVar result","pop a value and store in result"],
    ["Return","restore caller method state and push result"],
    ["Jump 99","set program counter to 99"],
    ["Frame binary_search (arr, val)","start of method binary_search"],
    ["DelVar result","delete method variable result"],
    ["Push PC(2)","push constant PC(2)"],
    ["Push ()","push constant ()"],
    ["Push 0","push constant 0"],
    ["LoadVar arr","push the value of arr"],
    ["3-ary DictAdd","pop 3 values and push the result of applying DictAdd"],
    ["Push 1","push constant 1"],
    ["LoadVar val","push the value of val"],
    ["DelVar val","delete method variable val"],
    ["3-ary DictAdd","pop 3 values and push the result of applying DictAdd"],
    ["Push 2","push constant 2"],
    ["Push 0","push constant 0"],
    ["3-ary DictAdd","pop 3 values and push the result of applying DictAdd"],
    ["Push 3","push constant 3"],
    ["LoadVar arr","push the value of arr"],
    ["DelVar arr","delete method variable arr"],
    ["1-ary len","pop 1 value and push the result of applying len"],
    ["3-ary DictAdd","pop 3 values and push the result of applying DictAdd"],
    ["Apply","pop a pc or dictionary f and an index i and push f(i)"],
    ["StoreVar result","pop a value and store in result"],
    ["Return","restore caller method state and push result"],
    ["Push 0","push constant 0"],
    ["StoreVar $n80","pop a value and store in $n80"],
    ["Push ()","push constant ()"],
    ["Push { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9 }","push constant { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9 }"],
    ["StoreVar $s83","pop a value and store in $s83"],
    ["LoadVar $s83","push the value of $s83"],
    ["1-ary IsEmpty","pop 1 value and push the result of applying IsEmpty"],
    ["JumpCond True 114","pop a value and jump to 114 if the value is True"],
    ["Cut($s83, i)","remove smallest element from $s83 and assign to i"],
    ["LoadVar $n80","push the value of $n80"],
    ["LoadVar i","push the value of i"],
    ["DelVar i","delete method variable i"],
    ["3-ary DictAdd","pop 3 values and push the result of applying DictAdd"],
    ["IncVar $n80","increment the value of $n80"],
    ["Jump 104","set program counter to 104"],
    ["DelVar $n80","delete method variable $n80"],
    ["DelVar $s83","delete method variable $s83"],
    ["Store arr","pop a value and store it in shared variable arr"],
    ["Push { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9 }","push constant { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9 }"],
    ["Store values","pop a value and store it in shared variable values"],
    ["Load values","push value of shared variable values"],
    ["1-ary len","pop 1 value and push the result of applying len"],
    ["Push 0","push constant 0"],
    ["2-ary !=","pop 2 values and push the result of applying !="],
    ["JumpCond False 154","pop a value and jump to 154 if the value is False"],
    ["Load values","push value of shared variable values"],
    ["Choose","pop a set value and push one of its elements"],
    ["StoreVar x","pop a value and store in x"],
    ["Load values","push value of shared variable values"],
    ["Push {}","push constant {}"],
    ["LoadVar x","push the value of x"],
    ["2-ary SetAdd","pop 2 values and push the result of applying SetAdd"],
    ["2-ary -","pop 2 values and push the result of applying -"],
    ["Store values","pop a value and store it in shared variable values"],
    ["Push PC(77)","push constant PC(77)"],
    ["Push ()","push constant ()"],
    ["Push 0","push constant 0"],
    ["Load arr","push value of shared variable arr"],
    ["3-ary DictAdd","pop 3 values and push the result of applying DictAdd"],
    ["Push 1","push constant 1"],
    ["LoadVar x","push the value of x"],
    ["3-ary DictAdd","pop 3 values and push the result of applying DictAdd"],
    ["Apply","pop a pc or dictionary f and an index i and push f(i)"],
    ["StoreVar i","pop a value and store in i"],
    ["ReadonlyInc","increment readonly counter of context; thread cannot mutate shared variables if > 0"],
    ["AtomicInc(lazy)","increment atomic counter of context; thread runs uninterrupted if larger than 0"],
    ["LoadVar i","push the value of i"],
    ["DelVar i","delete method variable i"],
    ["LoadVar x","push the value of x"],
    ["DelVar x","delete method variable x"],
    ["2-ary ==","pop 2 values and push the result of applying =="],
    ["Assert","pop a condition and raise exception if condition is false"],
    ["AtomicDec","decrement atomic counter of context"],
    ["ReadonlyDec","decrement readonly counter of context"],
    ["Jump 119","set program counter to 119"],
    ["Return","restore caller method state and push result"],
    ["DelVar result","delete method variable result"]
  ],
  "locations": {
    "1": { "file": "benchmarks/bs_mc.hny", "line": "1", "code": "def binary_search_rec(arr, val, l, r):" },
    "2": { "file": "benchmarks/bs_mc.hny", "line": "1", "code": "def binary_search_rec(arr, val, l, r):" },
    "3": { "file": "benchmarks/bs_mc.hny", "line": "2", "code": "    let m = (l + r) / 2:" },
    "4": { "file": "benchmarks/bs_mc.hny", "line": "2", "code": "    let m = (l + r) / 2:" },
    "5": { "file": "benchmarks/bs_mc.hny", "line": "2", "code": "    let m = (l + r) / 2:" },
    "6": { "file": "benchmarks/bs_mc.hny", "line": "2", "code": "    let m = (l + r) / 2:" },
    "7": { "file": "benchmarks/bs_mc.hny", "line": "2", "code": "    let m = (l + r) / 2:" },
    "8": { "file": "benchmarks/bs_mc.hny", "line": "2", "code": "    let m = (l + r) / 2:" },
    "9": { "file": "benchmarks/bs_mc.hny", "line": "2", "code": "    let m = (l + r) / 2:" },
    "10": { "file": "benchmarks/bs_mc.hny", "line": "3", "code": "        if arr[m] == val:" },
    "11": { "file": "benchmarks/bs_mc.hny", "line": "3", "code": "        if arr[m] == val:" },
    "12": { "file": "benchmarks/bs_mc.hny", "line": "3", "code": "        if arr[m] == val:" },
    "13": { "file": "benchmarks/bs_mc.hny", "line": "3", "code": "        if arr[m] == val:" },
    "14": { "file": "benchmarks/bs_mc.hny", "line": "3", "code": "        if arr[m] == val:" },
    "15": { "file": "benchmarks/bs_mc.hny", "line": "3", "code": "        if arr[m] == val:" },
    "16": { "file": "benchmarks/bs_mc.hny", "line": "4", "code": "            result = m" },
    "17": { "file": "benchmarks/bs_mc.hny", "line": "4", "code": "            result = m" },
    "18": { "file": "benchmarks/bs_mc.hny", "line": "4", "code": "            result = m" },
    "19": { "file": "benchmarks/bs_mc.hny", "line": "4", "code": "            result = m" },
    "20": { "file": "benchmarks/bs_mc.hny", "line": "4", "code": "            result = m" },
    "21": { "file": "benchmarks/bs_mc.hny", "line": "4", "code": "            result = m" },
    "22": { "file": "benchmarks/bs_mc.hny", "line": "4", "code": "            result = m" },
    "23": { "file": "benchmarks/bs_mc.hny", "line": "4", "code": "            result = m" },
    "24": { "file": "benchmarks/bs_mc.hny", "line": "5", "code": "        elif val < arr[m]:" },
    "25": { "file": "benchmarks/bs_mc.hny", "line": "5", "code": "        elif val < arr[m]:" },
    "26": { "file": "benchmarks/bs_mc.hny", "line": "5", "code": "        elif val < arr[m]:" },
    "27": { "file": "benchmarks/bs_mc.hny", "line": "5", "code": "        elif val < arr[m]:" },
    "28": { "file": "benchmarks/bs_mc.hny", "line": "5", "code": "        elif val < arr[m]:" },
    "29": { "file": "benchmarks/bs_mc.hny", "line": "5", "code": "        elif val < arr[m]:" },
    "30": { "file": "benchmarks/bs_mc.hny", "line": "6", "code": "            result = binary_search_rec(arr, val, l, m)" },
    "31": { "file": "benchmarks/bs_mc.hny", "line": "6", "code": "            result = binary_search_rec(arr, val, l, m)" },
    "32": { "file": "benchmarks/bs_mc.hny", "line": "6", "code": "            result = binary_search_rec(arr, val, l, m)" },
    "33": { "file": "benchmarks/bs_mc.hny", "line": "6", "code": "            result = binary_search_rec(arr, val, l, m)" },
    "34": { "file": "benchmarks/bs_mc.hny", "line": "6", "code": "            result = binary_search_rec(arr, val, l, m)" },
    "35": { "file": "benchmarks/bs_mc.hny", "line": "6", "code": "            result = binary_search_rec(arr, val, l, m)" },
    "36": { "file": "benchmarks/bs_mc.hny", "line": "6", "code": "            result = binary_search_rec(arr, val, l, m)" },
    "37": { "file": "benchmarks/bs_mc.hny", "line": "6", "code": "            result = binary_search_rec(arr, val, l, m)" },
    "38": { "file": "benchmarks/bs_mc.hny", "line": "6", "code": "            result = binary_search_rec(arr, val, l, m)" },
    "39": { "file": "benchmarks/bs_mc.hny", "line": "6", "code": "            result = binary_search_rec(arr, val, l, m)" },
    "40": { "file": "benchmarks/bs_mc.hny", "line": "6", "code": "            result = binary_search_rec(arr, val, l, m)" },
    "41": { "file": "benchmarks/bs_mc.hny", "line": "6", "code": "            result = binary_search_rec(arr, val, l, m)" },
    "42": { "file": "benchmarks/bs_mc.hny", "line": "6", "code": "            result = binary_search_rec(arr, val, l, m)" },
    "43": { "file": "benchmarks/bs_mc.hny", "line": "6", "code": "            result = binary_search_rec(arr, val, l, m)" },
    "44": { "file": "benchmarks/bs_mc.hny", "line": "6", "code": "            result = binary_search_rec(arr, val, l, m)" },
    "45": { "file": "benchmarks/bs_mc.hny", "line": "6", "code": "            result = binary_search_rec(arr, val, l, m)" },
    "46": { "file": "benchmarks/bs_mc.hny", "line": "6", "code": "            result = binary_search_rec(arr, val, l, m)" },
    "47": { "file": "benchmarks/bs_mc.hny", "line": "6", "code": "            result = binary_search_rec(arr, val, l, m)" },
    "48": { "file": "benchmarks/bs_mc.hny", "line": "6", "code": "            result = binary_search_rec(arr, val, l, m)" },
    "49": { "file": "benchmarks/bs_mc.hny", "line": "6", "code": "            result = binary_search_rec(arr, val, l, m)" },
    "50": { "file": "benchmarks/bs_mc.hny", "line": "6", "code": "            result = binary_search_rec(arr, val, l, m)" },
    "51": { "file": "benchmarks/bs_mc.hny", "line": "6", "code": "            result = binary_search_rec(arr, val, l, m)" },
    "52": { "file": "benchmarks/bs_mc.hny", "line": "8", "code": "            result = binary_search_rec(arr, val, m + 1, r)" },
    "53": { "file": "benchmarks/bs_mc.hny", "line": "8", "code": "            result = binary_search_rec(arr, val, m + 1, r)" },
    "54": { "file": "benchmarks/bs_mc.hny", "line": "8", "code": "            result = binary_search_rec(arr, val, m + 1, r)" },
    "55": { "file": "benchmarks/bs_mc.hny", "line": "8", "code": "            result = binary_search_rec(arr, val, m + 1, r)" },
    "56": { "file": "benchmarks/bs_mc.hny", "line": "8", "code": "            result = binary_search_rec(arr, val, m + 1, r)" },
    "57": { "file": "benchmarks/bs_mc.hny", "line": "8", "code": "            result = binary_search_rec(arr, val, m + 1, r)" },
    "58": { "file": "benchmarks/bs_mc.hny", "line": "8", "code": "            result = binary_search_rec(arr, val, m + 1, r)" },
    "59": { "file": "benchmarks/bs_mc.hny", "line": "8", "code": "            result = binary_search_rec(arr, val, m + 1, r)" },
    "60": { "file": "benchmarks/bs_mc.hny", "line": "8", "code": "            result = binary_search_rec(arr, val, m + 1, r)" },
    "61": { "file": "benchmarks/bs_mc.hny", "line": "8", "code": "            result = binary_search_rec(arr, val, m + 1, r)" },
    "62": { "file": "benchmarks/bs_mc.hny", "line": "8", "code": "            result = binary_search_rec(arr, val, m + 1, r)" },
    "63": { "file": "benchmarks/bs_mc.hny", "line": "8", "code": "            result = binary_search_rec(arr, val, m + 1, r)" },
    "64": { "file": "benchmarks/bs_mc.hny", "line": "8", "code": "            result = binary_search_rec(arr, val, m + 1, r)" },
    "65": { "file": "benchmarks/bs_mc.hny", "line": "8", "code": "            result = binary_search_rec(arr, val, m + 1, r)" },
    "66": { "file": "benchmarks/bs_mc.hny", "line": "8", "code": "            result = binary_search_rec(arr, val, m + 1, r)" },
    "67": { "file": "benchmarks/bs_mc.hny", "line": "8", "code": "            result = binary_search_rec(arr, val, m + 1, r)" },
    "68": { "file": "benchmarks/bs_mc.hny", "line": "8", "code": "            result = binary_search_rec(arr, val, m + 1, r)" },
    "69": { "file": "benchmarks/bs_mc.hny", "line": "8", "code": "            result = binary_search_rec(arr, val, m + 1, r)" },
    "70": { "file": "benchmarks/bs_mc.hny", "line": "8", "code": "            result = binary_search_rec(arr, val, m + 1, r)" },
    "71": { "file": "benchmarks/bs_mc.hny", "line": "8", "code": "            result = binary_search_rec(arr, val, m + 1, r)" },
    "72": { "file": "benchmarks/bs_mc.hny", "line": "8", "code": "            result = binary_search_rec(arr, val, m + 1, r)" },
    "73": { "file": "benchmarks/bs_mc.hny", "line": "8", "code": "            result = binary_search_rec(arr, val, m + 1, r)" },
    "74": { "file": "benchmarks/bs_mc.hny", "line": "8", "code": "            result = binary_search_rec(arr, val, m + 1, r)" },
    "75": { "file": "benchmarks/bs_mc.hny", "line": "8", "code": "            result = binary_search_rec(arr, val, m + 1, r)" },
    "76": { "file": "benchmarks/bs_mc.hny", "line": "11", "code": "def binary_search(arr, val):" },
    "77": { "file": "benchmarks/bs_mc.hny", "line": "11", "code": "def binary_search(arr, val):" },
    "78": { "file": "benchmarks/bs_mc.hny", "line": "12", "code": "    result = binary_search_rec(arr, val, 0, len(arr))" },
    "79": { "file": "benchmarks/bs_mc.hny", "line": "12", "code": "    result = binary_search_rec(arr, val, 0, len(arr))" },
    "80": { "file": "benchmarks/bs_mc.hny", "line": "12", "code": "    result = binary_search_rec(arr, val, 0, len(arr))" },
    "81": { "file": "benchmarks/bs_mc.hny", "line": "12", "code": "    result = binary_search_rec(arr, val, 0, len(arr))" },
    "82": { "file": "benchmarks/bs_mc.hny", "line": "12", "code": "    result = binary_search_rec(arr, val, 0, len(arr))" },
    "83": { "file": "benchmarks/bs_mc.hny", "line": "12", "code": "    result = binary_search_rec(arr, val, 0, len(arr))" },
    "84": { "file": "benchmarks/bs_mc.hny", "line": "12", "code": "    result = binary_search_rec(arr, val, 0, len(arr))" },
    "85": { "file": "benchmarks/bs_mc.hny", "line": "12", "code": "    result = binary_search_rec(arr, val, 0, len(arr))" },
    "86": { "file": "benchmarks/bs_mc.hny", "line": "12", "code": "    result = binary_search_rec(arr, val, 0, len(arr))" },
    "87": { "file": "benchmarks/bs_mc.hny", "line": "12", "code": "    result = binary_search_rec(arr, val, 0, len(arr))" },
    "88": { "file": "benchmarks/bs_mc.hny", "line": "12", "code": "    result = binary_search_rec(arr, val, 0, len(arr))" },
    "89": { "file": "benchmarks/bs_mc.hny", "line": "12", "code": "    result = binary_search_rec(arr, val, 0, len(arr))" },
    "90": { "file": "benchmarks/bs_mc.hny", "line": "12", "code": "    result = binary_search_rec(arr, val, 0, len(arr))" },
    "91": { "file": "benchmarks/bs_mc.hny", "line": "12", "code": "    result = binary_search_rec(arr, val, 0, len(arr))" },
    "92": { "file": "benchmarks/bs_mc.hny", "line": "12", "code": "    result = binary_search_rec(arr, val, 0, len(arr))" },
    "93": { "file": "benchmarks/bs_mc.hny", "line": "12", "code": "    result = binary_search_rec(arr, val, 0, len(arr))" },
    "94": { "file": "benchmarks/bs_mc.hny", "line": "12", "code": "    result = binary_search_rec(arr, val, 0, len(arr))" },
    "95": { "file": "benchmarks/bs_mc.hny", "line": "12", "code": "    result = binary_search_rec(arr, val, 0, len(arr))" },
    "96": { "file": "benchmarks/bs_mc.hny", "line": "12", "code": "    result = binary_search_rec(arr, val, 0, len(arr))" },
    "97": { "file": "benchmarks/bs_mc.hny", "line": "12", "code": "    result = binary_search_rec(arr, val, 0, len(arr))" },
    "98": { "file": "benchmarks/bs_mc.hny", "line": "12", "code": "    result = binary_search_rec(arr, val, 0, len(arr))" },
    "99": { "file": "benchmarks/bs_mc.hny", "line": "16", "code": "arr = [i for i in { 0..N-1 }]" },
    "100": { "file": "benchmarks/bs_mc.hny", "line": "16", "code": "arr = [i for i in { 0..N-1 }]" },
    "101": { "file": "benchmarks/bs_mc.hny", "line": "16", "code": "arr = [i for i in { 0..N-1 }]" },
    "102": { "file": "benchmarks/bs_mc.hny", "line": "16", "code": "arr = [i for i in { 0..N-1 }]" },
    "103": { "file": "benchmarks/bs_mc.hny", "line": "16", "code": "arr = [i for i in { 0..N-1 }]" },
    "104": { "file": "benchmarks/bs_mc.hny", "line": "16", "code": "arr = [i for i in { 0..N-1 }]" },
    "105": { "file": "benchmarks/bs_mc.hny", "line": "16", "code": "arr = [i for i in { 0..N-1 }]" },
    "106": { "file": "benchmarks/bs_mc.hny", "line": "16", "code": "arr = [i for i in { 0..N-1 }]" },
    "107": { "file": "benchmarks/bs_mc.hny", "line": "16", "code": "arr = [i for i in { 0..N-1 }]" },
    "108": { "file": "benchmarks/bs_mc.hny", "line": "16", "code": "arr = [i for i in { 0..N-1 }]" },
    "109": { "file": "benchmarks/bs_mc.hny", "line": "16", "code": "arr = [i for i in { 0..N-1 }]" },
    "110": { "file": "benchmarks/bs_mc.hny", "line": "16", "code": "arr = [i for i in { 0..N-1 }]" },
    "111": { "file": "benchmarks/bs_mc.hny", "line": "16", "code": "arr = [i for i in { 0..N-1 }]" },
    "112": { "file": "benchmarks/bs_mc.hny", "line": "16", "code": "arr = [i for i in { 0..N-1 }]" },
    "113": { "file": "benchmarks/bs_mc.hny", "line": "16", "code": "arr = [i for i in { 0..N-1 }]" },
    "114": { "file": "benchmarks/bs_mc.hny", "line": "16", "code": "arr = [i for i in { 0..N-1 }]" },
    "115": { "file": "benchmarks/bs_mc.hny", "line": "16", "code": "arr = [i for i in { 0..N-1 }]" },
    "116": { "file": "benchmarks/bs_mc.hny", "line": "16", "code": "arr = [i for i in { 0..N-1 }]" },
    "117": { "file": "benchmarks/bs_mc.hny", "line": "17", "code": "values = { 0..N-1 }" },
    "118": { "file": "benchmarks/bs_mc.hny", "line": "17", "code": "values = { 0..N-1 }" },
    "119": { "file": "benchmarks/bs_mc.hny", "line": "19", "code": "while len(values) != 0:" },
    "120": { "file": "benchmarks/bs_mc.hny", "line": "19", "code": "while len(values) != 0:" },
    "121": { "file": "benchmarks/bs_mc.hny", "line": "19", "code": "while len(values) != 0:" },
    "122": { "file": "benchmarks/bs_mc.hny", "line": "19", "code": "while len(values) != 0:" },
    "123": { "file": "benchmarks/bs_mc.hny", "line": "19", "code": "while len(values) != 0:" },
    "124": { "file": "benchmarks/bs_mc.hny", "line": "20", "code": "    let x = choose(values):" },
    "125": { "file": "benchmarks/bs_mc.hny", "line": "20", "code": "    let x = choose(values):" },
    "126": { "file": "benchmarks/bs_mc.hny", "line": "20", "code": "    let x = choose(values):" },
    "127": { "file": "benchmarks/bs_mc.hny", "line": "21", "code": "        values -= {x}" },
    "128": { "file": "benchmarks/bs_mc.hny", "line": "21", "code": "        values -= {x}" },
    "129": { "file": "benchmarks/bs_mc.hny", "line": "21", "code": "        values -= {x}" },
    "130": { "file": "benchmarks/bs_mc.hny", "line": "21", "code": "        values -= {x}" },
    "131": { "file": "benchmarks/bs_mc.hny", "line": "21", "code": "        values -= {x}" },
    "132": { "file": "benchmarks/bs_mc.hny", "line": "21", "code": "        values -= {x}" },
    "133": { "file": "benchmarks/bs_mc.hny", "line": "22", "code": "        let i = binary_search(arr, x):" },
    "134": { "file": "benchmarks/bs_mc.hny", "line": "22", "code": "        let i = binary_search(arr, x):" },
    "135": { "file": "benchmarks/bs_mc.hny", "line": "22", "code": "        let i = binary_search(arr, x):" },
    "136": { "file": "benchmarks/bs_mc.hny", "line": "22", "code": "        let i = binary_search(arr, x):" },
    "137": { "file": "benchmarks/bs_mc.hny", "line": "22", "code": "        let i = binary_search(arr, x):" },
    "138": { "file": "benchmarks/bs_mc.hny", "line": "22", "code": "        let i = binary_search(arr, x):" },
    "139": { "file": "benchmarks/bs_mc.hny", "line": "22", "code": "        let i = binary_search(arr, x):" },
    "140": { "file": "benchmarks/bs_mc.hny", "line": "22", "code": "        let i = binary_search(arr, x):" },
    "141": { "file": "benchmarks/bs_mc.hny", "line": "22", "code": "        let i = binary_search(arr, x):" },
    "142": { "file": "benchmarks/bs_mc.hny", "line": "22", "code": "        let i = binary_search(arr, x):" },
    "143": { "file": "benchmarks/bs_mc.hny", "line": "23", "code": "            assert i == x" },
    "144": { "file": "benchmarks/bs_mc.hny", "line": "23", "code": "            assert i == x" },
    "145": { "file": "benchmarks/bs_mc.hny", "line": "23", "code": "            assert i == x" },
    "146": { "file": "benchmarks/bs_mc.hny", "line": "23", "code": "            assert i == x" },
    "147": { "file": "benchmarks/bs_mc.hny", "line": "23", "code": "            assert i == x" },
    "148": { "file": "benchmarks/bs_mc.hny", "line": "23", "code": "            assert i == x" },
    "149": { "file": "benchmarks/bs_mc.hny", "line": "23", "code": "            assert i == x" },
    "150": { "file": "benchmarks/bs_mc.hny", "line": "23", "code": "            assert i == x" },
    "151": { "file": "benchmarks/bs_mc.hny", "line": "23", "code": "            assert i == x" },
    "152": { "file": "benchmarks/bs_mc.hny", "line": "23", "code": "            assert i == x" },
    "153": { "file": "benchmarks/bs_mc.hny", "line": "23", "code": "            assert i == x" },
    "154": { "file": "benchmarks/bs_mc.hny", "line": "23", "code": "            assert i == x" },
    "155": { "file": "benchmarks/bs_mc.hny", "line": "23", "code": "            assert i == x" }
  }
}
